#include <iostream>
#include <stack>
#include <string.h>
using namespace std;

struct node {
    char data;
    node *leftchild;
    node *rightchild;
} *root;

node *construct_prefix_tree(char prefix[]);
node *construct_postfix_tree(char postfix[]);
void recursive_inorder(node *root);
void recursive_preorder(node *root);
void recursive_postorder(node *root);
void nonrecursive_inorder(node *root);
void nonrecursive_preorder(node *root);
void nonrecursive_postorder(node *root);

bool isOperator(char c) {
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
        return true;
    }
    return false;
}

node* newNode(char v) {
    node *temp = new node;
    temp->leftchild = NULL;
    temp->rightchild = NULL;
    temp->data = v;
    return temp;
}

node* construct_postfix_tree(char postfix[]) {
    stack<node *> s;
    node *root, *t1, *t2;

    for (int i = 0; i < strlen(postfix); i++) {
        if (!isOperator(postfix[i])) {
            root = newNode(postfix[i]);
            s.push(root);
        } else {
            root = newNode(postfix[i]);
            t1 = s.top();
            s.pop();
            t2 = s.top();
            s.pop();
            root->rightchild = t1;
            root->leftchild = t2;
            s.push(root);
        }
    }
    root = s.top();
    s.pop();
    return root;
}

node* construct_prefix_tree(char prefix[]) {
    stack<node *> s;
    node *root, *t1, *t2;

    for (int i = 0; i < strlen(prefix); i++) {
        if (!isOperator(prefix[i])) {
            root = newNode(prefix[i]);
            s.push(root);
        } else {
            root = newNode(prefix[i]);
            t1 = s.top();
            s.pop();
            t2 = s.top();
            s.pop();
            root->leftchild = t1;
            root->rightchild = t2;
            s.push(root);
        }
    }
    root = s.top();
    s.pop();
    return root;
}

void recursive_inorder(node* root) {
    if (root != NULL) {
        recursive_inorder(root->leftchild);
        cout << " " << root->data;
        recursive_inorder(root->rightchild);
    }
}

void recursive_preorder(node* root) {
    if (root != NULL) {
        cout << " " << root->data;
        recursive_preorder(root->leftchild);
        recursive_preorder(root->rightchild);
    }
}

void recursive_postorder(node* root) {
    if (root != NULL) {
        recursive_postorder(root->leftchild);
        recursive_postorder(root->rightchild);
        cout << " " << root->data;
    }
}

void nonrecursive_inorder(node *root) {
    stack<node *> s;
    node *current_node = root;
    while (current_node != NULL || !s.empty()) {
        while (current_node != NULL) {
            s.push(current_node);
            current_node = current_node->leftchild;
        }
        current_node = s.top();
        s.pop();
        cout << current_node->data;
        current_node = current_node->rightchild;
    }
}

void nonrecursive_preorder(node *root) {
    stack<node *> s;
    s.push(root);
    while (!s.empty()) {
        node *temp = s.top();
        s.pop();
        cout << " " << temp->data;
        if (temp->rightchild) {
            s.push(temp->rightchild);
        }
        if (temp->leftchild) {
            s.push(temp->leftchild);
        }
    }
}

void nonrecursive_postorder(node *root) {
    if (root == NULL) {
        return;
    }
    stack<node *> s1, s2;
    s1.push(root);
    while (!s1.empty()) {
        node *temp = s1.top();
        s1.pop();
        s2.push(temp);
        if (temp->leftchild) {
            s1.push(temp->leftchild);
        }
        if (temp->rightchild) {
            s1.push(temp->rightchild);
        }
    }
    while (!s2.empty()) {
        node *temp = s2.top();
        s2.pop();
        cout << " " << temp->data;
    }
}

int main() {
    int choice, choice_R;
    node *root_address;
    char reverse[100], prefix[100], postfix[100];
    do {
        cout << "\nFrom which expression you want to construct binary expression tree?";
        cout << "\n1) Prefix Expression. \n2) Postfix Expression. \n3) Exit.";
        cout << "\nEnter Your Choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "\nEnter Prefix Expression: ";
                cin >> prefix;
                for (int j = strlen(prefix) - 1; j >= 0; j--)
                    reverse[j] = prefix[j];
                reverse[strlen(prefix)] = '\0';
                root_address = construct_prefix_tree(reverse);
                cout << "\nIn which manner you want to traverse the binary expression tree?";
                cout << "\n1) Recursively. \n2) Non-Recursively. \n3) Exit.";
                cout << "\nEnter Your Choice:  ";
                cin >> choice_R;
                switch (choice_R) {
                    case 1:
                        cout << "\nRecursive preorder is: ";
                        recursive_preorder(root_address);
                        cout << "\nRecursive inorder is: ";
                        recursive_inorder(root_address);
                        cout << "\nRecursive postorder is: ";
                        recursive_postorder(root_address);
                        break;
                    case 2:
                        cout << "\nNon-Recursive preorder is: ";
                        nonrecursive_preorder(root_address);
                        cout << "\nNon-Recursive inorder is: ";
                        nonrecursive_inorder(root_address);
                        cout << "\nNon-Recursive postorder is: ";
                        nonrecursive_postorder(root_address);
                        break;
                    case 3:
                        cout << "You Have Successfully Exited!";
                        break;
                    default:
                        cout << "INVALID CHOICE!";
                }
                break;
            case 2:
                cout << "\nEnter Postfix Expression: ";
                cin >> postfix;
                root_address = construct_postfix_tree(postfix);
                cout << "\nIn which manner you want to traverse the binary expression tree?";
                cout << "\n1) Recursively. \n2) Non-Recursively. \n3) Exit.";
                cout << "\nEnter Your Choice: ";
                cin >> choice_R;
                switch (choice_R) {
                    case 1:
                        cout << "\nRecursive preorder is: ";
                        recursive_preorder(root_address);
                        cout << "\nRecursive inorder is: ";
                        recursive_inorder(root_address);
                        cout << "\nRecursive postorder is: ";
                        recursive_postorder(root_address);
                        break;
                    case 2:
                        cout << "\nNon-Recursive preorder is: ";
                        nonrecursive_preorder(root_address);
                        cout << "\nNon-Recursive inorder is: ";
                        nonrecursive_inorder(root_address);
                        cout << "\nNon-Recursive postorder is: ";
                        nonrecursive_postorder(root_address);
                        break;
                    case 3:
                        cout << "You Have Successfully Exited!";
                        break;
                    default:
                        cout << "INVALID CHOICE!";
                }
                break;
        }
    } while (choice != 3);
    return 0;
}




Title: Construct an Expression Tree  

Aim: Construct an Expression Tree from Postfix and Prefix expression and perform Inorder  , Preorder and Postorder Traversal 

Objective: Construct an Expression Tree from Postfix and Prefix expression and perform  Inorder ,Preorder and Postorder Traversal 
Problem Statement: Construct an Expression Tree from postfix and prefix expression. 

Perform :- 
• Recursive traversals 
In-order  
Pre-order 
Post-order 
• Non-recursive traversals 
In-order, 
Pre-order 
Post-order 

Requirements:Software, text editor, GDB Compiler, terminal, etc.

Theory:
Expression Tree:- 
Expression trees are those in which the leaf nodes have the values to be operated, and  internal nodes contain the operator on which the leaf node will be performed. To construct  an Expression Tree for the given expression, we generally use Stack Data Structure. 

Initially we Iterate over the given postfix expression and follow the steps as given below:- 
1. If we get an operand in the given expression, then push it in the stack. It will become the  root of the expression Tree. 
2. If an operator gets two values in the expression, then add in the expression tree as its  child, and push them in the current node.
3. Repeat Step-1 and Step-2 until we do not complete over the given expression. 
4. Now check if every root node contains nothing but operands and every child node  contains only values. 

InOrder Traversal:- 
An inorder traversal is a traversal technique that follows the policy, i.e., Left Root Right.  Here, Left Root Right means that the left subtree of the root node is traversed first, then the  root node, and then the right subtree of the root node is traversed. Here, inorder name  itself suggests that the root node comes in between the left and the right subtrees. 

PreOrder Traversal:- 
A preorder traversal is a traversal technique that follows the policy, i.e., Root Left Right.  Here, Root Left Right means root node of the tree is traversed first, then the left subtree  and finally the right subtree is traversed. Here, the Preorder name itself suggests that the  root node would be traversed first. 

PostOrder Traversal:- 
A Postorder traversal is a traversal technique that follows the policy, i.e., Left Right Root.  Here, Left Right Root means the left subtree of the root node is traversed first, then the  right subtree, and finally, the root node is traversed. Here, the Postorder name itself  suggests that the root node of the tree would be traversed at the last. 

Algorithm of whole program: