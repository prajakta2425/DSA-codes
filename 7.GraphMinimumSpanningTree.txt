




#include<iostream>
using namespace std;

const int V=8;

int MinimumKey(int key[], bool visited[]){ 
    int min = 999, min_index;  
    for (int v = 0; v < V; v++){ 
        if (visited[v] == false && key[v] < min){ 
            min = key[v];
			min_index = v;  
        }
    }    
    return min_index;  
}  

int printMST(int parent[], int cost[V][V]){  
    string dept [8] = {"CS","IT","ENTC","Elec.","Mech.","AIDS","AIML","Civil"};
    int minCost=0;
	cout<<"Department\t----->   Distance\n"; 
    cout<<endl;
    for (int i = 1; i< V; i++) 
    {
		cout<<"A--B : "<<dept[parent[i]]<<" --> "<<dept[i]<<" \t Dist ="<<cost[i][parent[i]]<<" m"<<" \n";  
		minCost+=cost[i][parent[i]];
    }
    cout<<endl;
	cout<<"Distance of Mininimum Spanning Tree is : "<<minCost<<" m";
	return minCost;
}  

void findMST(int cost[V][V]){  
    int parent[V], key[V];
    bool visited[V];
    for (int i = 0; i< V; i++) 
    { 
        key[i] = 999;   
        visited[i] = false;
        parent[i]=-1;
    }    
    key[0] = 0;  
    parent[0] = -1; 
    for (int x = 0; x < V - 1; x++) 
    {  
        int u = MinimumKey(key, visited);  
        visited[u] = true;  
        for (int v = 0; v < V; v++)  
        {
            if (cost[u][v]!=0 && visited[v] == false && cost[u][v] < key[v])
            {  
                parent[v] = u;
                key[v] = cost[u][v];  
            }        
        }
    }
	printMST(parent, cost);  
}  

int main()  
{  
    cout<<"\tPrim's Algorithm";
	cout<<endl;
    int graph[V][V] = { {0,80,50,0,0,0,0,40},
                        {80,0,50,300,80,0,30,0},
	                    {50,50,0,90,70,0,30,30},
	                    {0,290,90,0,190,290,0,0},
	                    {0,80,70,190,0,60,28,71},
	                    {0,0,0,290,60,0,0,80}, 
                        {0,35,76,91,0,0,0,0},
                        {30,50,20,0,0,41,0,0} };
	findMST(graph);  
    return 0;  
}  








Title: Minimum Spanning Tree 

Aim: Represent graph using adjacency matrix and find minimum spanning tree.

Objective: Represent graph using adjacency matrix and find minimum spanning tree. 

Problem Statement: Represent a graph of your college campus using adjacency list /adjacency matrix. Nodes should represent the various departments/institutes and links should represent the distance between them. Find minimum spanning tree 
a) Using Kruskal’s algorithm. 
b) Using Prim’s algorithm. 

Requirements: Software, text editor, GDB Compiler, terminal, etc.

Theory:

Kruskal’s Algorithm : Kruskal's Algorithm is used to find the minimum spanning tree for a connected weighted graph. The main target of the algorithm is to find the subset of edges by using which, we can traverse every vertex of the graph. Kruskal's algorithm follows greedy approach which finds an optimum solution at every stage instead of focusing on a global optimum. It is used for finding the Minimum Spanning Tree (MST) of a given graph. To apply Kruskal’s algorithm, the given graph must be weighted, connected and undirected. 

Prim’s Algorithm :- 
Prim's algorithm is a minimum spanning tree algorithm that takes a graph as input and finds the subset of the edges of that graph which form a tree that includes every vertex has the minimum sum of weights among all the trees that can be formed from the graph. It falls under a class of algorithms called greedy algorithms that find the local optimum in the hopes of finding a global optimum. We start from one vertex and keep adding edges with the lowest weight until we reach our goal.

Algorithm:

Kruskal’s Algorithm:
STEP 1: START 
STEP 1: Sort all the edges from low weight to high weight. 
STEP 1: Take the edge with the lowest weight and use it to connect the vertices of graph. 
STEP 1: If adding an edge creates a cycle, then reject that edge and go for the next least weight edge. 
STEP 1: Keep adding edges until all the vertices are connected and a Minimum Spanning Tree (MST) is obtained. 
STEP 1: STOP 

Prim’s Algorithm (Algo):- 
Step 1: START 
Step 2: Keep a track of all the vertices that have been visited and added to the spanning tree. 
Step 3: Initially the spanning tree is empty. 
Step 4: Choose a random vertex, and add it to the spanning tree. This becomes the root node. 
Step 5: Add a new vertex, say x, such that x is not in the already built spanning tree. x is connected to the built spanning tree using minimum weight edge. (Thus, x can be adjacent to any of the nodes that have already been added in the spanning tree). Adding x to the spanning tree should not form cycles. 
Step 6: Repeat the Step 4, till all the vertices of the graph are added to the spanning tree. Step 7: Print the total cost of the spanning tree. 
Step 8: STOP 

Algorithm of whole program: