
#include<iostream>
#include<stdlib.h>
#include<iomanip>
using namespace std;

int n;
class Student {
    int rollNo;
    string name;
    float sgpa;
public:
    void getData();
    void ShowData();
    void rollList();
    void findsgpa();
    void FindName();
    void TopTen();
    int partition(Student ar[], int lb, int ub);
    void QuickSort(Student ar[], int lb, int ub);
} s[25];

int main() {
    int m;
    int count = 1;
    while (1) {
        cout << endl << "MAIN MENU";
        cout << endl << "1. Enter data";
        cout << endl << "2. Show Data";
        cout << endl << "3. Search Student by SGPA";
        cout << endl << "4. Show Roll List";
        cout << endl << "5. Search student by name";
        cout << endl << "6. Topper List";
        cout << endl << "7. Exit";
        cout << endl << "Enter your choice: ";
        cin >> m;
        switch (m) {
            case 1:
                cout << "Enter number of students: ";
                cin >> n;
                for (int i = 0; i < n; i++) {
                    cout << endl << "Enter data for student " << count++ << endl;
                    s[i].getData();
                }
                break;
            case 2:
                for (int i = 0; i < n; i++)
                    s[i].ShowData();
                break;
            case 3:
                s[0].findsgpa();
                break;
            case 4:
                s[0].rollList();
                break;
            case 5:
                s[0].FindName();
                break;
            case 6:
                s[0].TopTen();
                break;
            case 7:
                return 0; // Exiting the program gracefully
        }
    }
}

void swap(Student &a, Student &b) {
    Student temp = a;
    a = b;
    b = temp;
}

void ask(int mid) {
    char ch;
    cout << endl << "Student Found!";
    cout << endl << "Do you want to see his/her data? (y/n) ";
    cin >> ch;
    if (ch == 'y') {
        s[mid].ShowData();
    }
}

void Student::getData() {
    cout << "Enter Name of Student : ";
    cin.ignore();  // To clear any leftover input in the buffer
    getline(cin, name);
    cout << "Enter Roll no of Student : ";
    cin >> rollNo;
    cout << "Enter Student SGPA :  ";
    cin >> sgpa;
    cout << endl;
}

void Student::ShowData() {
    cout << endl;
    cout << "NAME: " << name << "\tRoll no: " << rollNo;
    cout << fixed << setprecision(2) << "\tSGPA: " << sgpa;
    cout << endl;
}

void Student::findsgpa() {
    int count = 0;
    float toFind;
    cout << endl << "Enter SGPA to search: ";
    cin >> toFind;
    for (int i = 0; i < n; i++) {
        if (s[i].sgpa == toFind) {
            ask(i);
            count++;
        }
    }
    if (count == 0)
        cout << toFind << " SGPA and student not found!" << endl;
}

void Student::rollList() {
    int rtemp;
    string tname;
    float gtemp;
    for (int i = 0; i < (n - 1); i++) {
        for (int j = 0; j < (n - i - 1); j++) {
            if (s[j].rollNo > s[j + 1].rollNo) {
                rtemp = s[j].rollNo;
                s[j].rollNo = s[j + 1].rollNo;
                s[j + 1].rollNo = rtemp;

                tname = s[j].name;
                s[j].name = s[j + 1].name;
                s[j + 1].name = tname;

                gtemp = s[j].sgpa;
                s[j].sgpa = s[j + 1].sgpa;
                s[j + 1].sgpa = gtemp;
            }
        }
    }
    cout << "\nSorted Roll Call List:\n";
    for (int i = 0; i < n; i++)
        s[i].ShowData();
    cout << endl;
}

void Student::FindName() {
    int temp;
    string sname, tname;
    float gtemp;
    cout << "Enter Name to search: ";
    cin >> sname;
    for (int i = 0; i < (n - 1); i++) {
        for (int j = 0; j < (n - i - 1); j++) {
            if (s[j].name > s[j + 1].name) {
                temp = s[j].rollNo;
                s[j].rollNo = s[j + 1].rollNo;
                s[j + 1].rollNo = temp;

                tname = s[j].name;
                s[j].name = s[j + 1].name;
                s[j + 1].name = tname;

                gtemp = s[j].sgpa;
                s[j].sgpa = s[j + 1].sgpa;
                s[j + 1].sgpa = gtemp;
            }
        }
    }
    int f = 0, r = n - 1, mid;
    while (f <= r) {
        mid = (f + r) / 2;
        if (s[mid].name == sname) {
            ask(mid);
            break;
        }
        else if (s[mid].name < sname)
            f = mid + 1;
        else
            r = mid - 1;
    }

    if (f > r)
        cout << "\nNot Found!\n";
}

int Student::partition(Student ar[], int lb, int ub) {
    string stemp;
    int rtemp;
    float gtemp;
    int pivot = ar[lb].sgpa, start = lb, end = ub;
    while (start < end) {
        while (ar[start].sgpa <= pivot)
            start++;
        while (ar[end].sgpa > pivot)
            end--;
        if (start < end) {
            swap(s[start], s[end]);
        }
    }
    swap(ar[lb], ar[end]);
    return end;
}

void Student::QuickSort(Student ar[], int lb, int ub) {
    if (lb < ub) {
        int pos = partition(ar, lb, ub);
        QuickSort(ar, lb, pos - 1);
        QuickSort(ar, pos + 1, ub);
    }
}

void Student::TopTen() {
    QuickSort(s, 0, n - 1);
    int count = (n > 10) ? 10 : n;  // Display up to 10 students
    for (int i = n - 1; i >= n - count; i--) {
        s[i].ShowData();
    }
}







*****Searching and sorting******
Title: Creating Student Database of SE IT Class 

Aim: : To study data structures and their implementations and applications. 

Objective: To study data structures and their implementations and applications. 

Problem Statement: Create a Database containing different fields of every student like Roll No, Name and SGPA. 

Requirements:Software, text editor, GDB Compiler, terminal, etc.

Theory: 
Class:- A class in C++ is the building block, that leads to Object-Oriented programming. It is a user-defined data type, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A C++ class is like a blueprint for an object. Data members are the data variables and member functions are the functions used to manipulate these variables and together these data members and member functions defines the properties and behavior of the objects in a Class. Member Functions in Classes :There are 2 ways to define a member function in class: 
• Inside class definition 
• Outside class definition 

Object:- An object is an instance of a Class. When a class is defined, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. As we can see, we can create objects of a class in any function of the program. We can also create objects of a class within the class itself, or in other classes. Also, we can create as many objects as we want from a single class.

Array Of Object :- Like array of other user-defined data types, an array of type class can also be created. The array of type class contains the objects of the class as its individual elements. Thus, an array of a class type is also known as an array of objects. An array of objects is declared in the same way as an array of any built-in data type. The syntax for declaring an array of objects is: 
class_name array_name [size] ; 

Bubble Sort :- Bubble sort works on the repeatedly swapping of adjacent elements until they are not in the intended order. It is called bubble sort because the movement of array elements is just like the movement of air bubbles in the water. Bubbles in water rise up to the surface; similarly, the array elements in bubble sort move to the end in each iteration. Although it is simple to use, it is primarily used as an educational tool because the performance of bubble sort is poor in the real world. It is not suitable for large data sets. The average and worst-case complexity of Bubble sort is O(n2), where n is a number of items. 

Insertion Sort :- Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part. 

Quick Sort :- QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. 
a. Always pick first element as pivot. 
b. Always pick last element as pivot (implemented below) 
c. Pick a random element as pivot. 
d. Pick median as pivot. 

Linear search :- Linear search is the simplest search algorithm and often called sequential search. In this type of searching, we simply traverse the list completely and match each element of the list with the item whose location is to be found. If the match found then location of the item is returned otherwise the algorithm return NULL.Linear search is mostly used to search an unordered list in which the items are not sorted. 

Binary search :- Binary search is the search technique which works efficiently on the sorted lists. Hence, in order to search an element into some list by using binary search technique, we must ensure that the list is sorted.Binary search follows divide and conquer approach in which, the list is divided into two halves and the item is compared with the middle element of the list. If the match is found then, the location of middle element is returned otherwise, we search into either of the halves depending upon the result produced through the match.

Algorithm of whole program:
