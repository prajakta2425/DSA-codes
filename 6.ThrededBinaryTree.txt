






#include<iostream>
using namespace std;

class node{
    public:
        int data;
        int lth,rth;
        node *left,*right;
};

class thread{
    private:
    node *dummy;
    node *New,*root,*temp,*parent;
    public:
    thread();
    void create();
    void insert(node *,node *);
    void display();
    void find();
    void delet();
    void del(node *root,node *dummy,int key);
};

thread::thread(){
    root=NULL;
}

void thread::create(){
    New=new node;
    New->left=NULL;
    New->right=NULL;
    New->lth=0;
    New->rth=0;
    cout<<"\n Enter The Element: ";
    cin>>New->data;
    if(root==NULL)
    {
        root=New;
        dummy=new node;
        dummy->data=-999;
        dummy->left=root;
        root->left=dummy;
        root->right=dummy;
    }
    else
    insert(root,New);
}

void thread::insert(node *root,node *New){
    if(New->data<root->data)
    {
        if(root->lth==0)
        {
            New->left=root->left;
            New->right=root;
            root->left=New;
            root->lth=1;
        }
        else
            insert(root->left,New);
            
    }
    if(New->data>root->data)
    {
        if(root->rth==0)
        {
            New->right=root->right;
            New->left=root;
            root->rth=1;
            root->right=New;
        }
        else
        insert(root->right,New);
    }
}

void thread::display(){
    void inorder(node*,node *dummy);
    void preorder(node*,node *dummy);
    if(root==NULL)
        cout<<"Tree is not created!";
    else
        {
            cout<<"\nInorder Traversal: ";
            inorder(root,dummy);
            cout<<"\nPreorder Traversal: ";
            preorder(root,dummy);
            
        }
}

void inorder(node *temp,node *dummy){
    while(temp!=dummy)
    {
        while(temp->lth==1)
        temp=temp->left;
    cout<<" "<<temp->data;
    while(temp->rth==0)
    {
        temp=temp->right;
        if(temp==dummy)
        return;
        cout<<" "<<temp->data;
    }
    temp=temp->right;
    }
}

void preorder(node *temp,node *dummy){
    int flag=0;
    while(temp!=dummy)
    {
        if(flag==0)
        cout<<" "<<temp->data;
        if((temp->lth==1)&&(flag==0))
        {
            temp=temp->left;
            
        }
        else
        {
            while(1)
            {
                if(temp->rth==1)
                {
                    flag=0;
                    temp=temp->right;
                    break;
                }
                else
                {
                    if(temp!=dummy)
                    {
                        flag=1;
                        temp=temp->right;
                        break;
                    }
                }
            }
        }
    }
}

int main()
{
    int choice;
    char ans='N';
    thread th;
    do
    {
        cout<<"Program For Threaded Binary Tree";
        cout<<"\n1.Create \n2.Display \n3.Exit";
        cout<<"\nEnter your choice: ";
        cin>>choice;
        switch(choice)
        {
            case 1:
            do
            {
                th.create();
                cout<<"\n Do u want to enter more elements?(y/n) ";
                cin>>ans;
            }while(ans=='y');
            break;
            
            case 2:th.display();
            break;
            
            case 3:
            exit(0);
        }
        cout<<"\n\nWant To See Main Menu?(y/n) ";
        cin>>ans;
        cout<<endl;
    }while(ans=='y');
    return 0;
}







Title: Threaded Binary Tree. 

Aim: Implementation of threaded Binary Tree and Performing Operations. 

Objective: Implementation of threaded Binary Tree and Performing Operations. 

Problem Statement:Implement binary search tree and perform following operations: 
a) create
b) display

Requirements:Software, text editor, GDB Compiler, terminal, etc.

Theory:

Threaded binary tree: A threaded binary tree is a type of binary tree data structure where the empty left and right child pointers in a binary tree are replaced with threads that link nodes directly to their in-order predecessor or successor, thereby providing a way to traverse the tree without using recursion or a stack.

There are two types of threaded binary trees. 
Single Threaded: Where a NULL right pointers is made to point to the inorder successor
Double Threaded: Where both left and right NULL pointers are made to point to inorder predecessor and inorder successor respectively. The predecessor threads are useful for reverse inorder traversal and postorder traversal.

Right threaded binary trees: If thread appears in the right link field of a node then it will point to the next node that will appear on performing in order traversal. Such trees are called Right threaded binary trees. 

left threaded binary trees: If thread appears in the left field of a node then it will point to the nodes inorder predecessor. Such trees are called Left threaded binary trees.

Advantages of Threaded Binary Tree:
In this Tree it enables linear traversal of elements.
It eliminates the use of stack as it perform linear traversal, so save memory.
Enables to find parent node without explicit use of parent pointer
Threaded tree give forward and backward traversal of nodes by in-order fashion
Nodes contain pointers to in-order predecessor and successor

Disadvantages of Threaded Binary Tree:
Every node in threaded binary tree need extra information(extra memory) to indicate whether its left or right node indicated its child nodes or its inorder predecessor or successor. So, the node consumes extra memory to implement.
Insertion and deletion are way more complex and time consuming than the normal one since both threads and ordinary links need to be maintained.
Implementing threads for every possible node is complicated.

Algorithm of whole program: