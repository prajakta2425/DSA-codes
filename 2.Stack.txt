




#include<stdlib.h>
#include<iostream>
#include<string.h>
#define max 30
using namespace std;

int precedence(char x);
void infix_to_prefix(char infix[], char prefix[]);
void infix_to_postfix(char infix[], char postfix[]);
void eval_prefix(char prefix[]);
void eval_postfix(char postfix[]);
int evaluate(char x, int op1, int op2);

struct node{
    char data;
    struct node* next;
};

class stack{
    node* top;
    char x;
public:
    stack()
    {
        top = NULL;
    }
    int empty()
    {
        if (top == NULL)
        {
            return(1);
        }
        else
        {
            return(0);
        }
    }
    void push(char x)
    {
        node* p;
        p = new node;
        p->data = x;
        p->next = top;
        top = p;
    }
    char pop()
    {
        if (!empty())
        {
            node* p;
            p = new node;
            p = top;
            top = top->next;
            x = p->data;
            delete p;
            return(x);
        }
        else
        {
            cout << "stack is empty" << endl;
            return(0);
        }
    }
    char pop1()
    {
        if (!empty())
        {
            node* p;
            p = new node;
            p = top;
            x = p->data;
            return(x);
        }
        else
        {
            cout << "stack is empty" << endl;
            return(0);
        }
    }
};
 
int main()
{
    char infix[30], prefix[30], postfix[30];
    int op;
    do {
        cout<<endl<<"MAIN MENU";
        cout<<endl<<"1. Infix to Prefix with Evaluation";
        cout<<endl<<"2. Infix to Postfix with Evaluation";
        cout<<endl<<"3. Exit";
        cout<<endl;
        cout<<endl<<"Enter your choice: ";
            cin>>op;    
        switch (op)
        {
        case 1:
            cout << "Enter the infix expression: ";
                cin >> infix;
            infix_to_prefix(infix, prefix);
            cout << "Prefix expression is: " << prefix << endl;
            cout<<endl;
            cout << "Evaluation of Prefix expression: ";
            eval_prefix(prefix);
            cout<<endl;
            break;
        case 2:
            cout << "Enter the infix expression: ";
                cin >> infix;
            infix_to_postfix(infix, postfix);
            cout << "Postfix expression is: " << postfix << endl;
            cout<<endl;
            cout << "Evaluation of Postfix expression: ";
            eval_postfix(postfix);
            break;
        }
    } while (op != 3);
    return 0;
}

void infix_to_prefix(char infix[], char prefix[]){
    int i, j;
    char temp, in1[30];
    cout << "\n step 1: Entered infix is: ";
    for (i = 0; i <= strlen(infix) - 1; i++)
    {
        cout << infix[i];
    }
    for (i = strlen(infix) - 1, j = 0; i >= 0; i--, j++)
        in1[j] = infix[i];
    in1[j] = '\0';
 
    cout << "\n\n step 2: ";
    for (i = 0; i <= strlen(in1) - 1; i++)
    {
        cout << in1[i];
    }
 
    for (i = 0; in1[i] != '\0'; i++)
    {
        if (in1[i] == '(')
            in1[i] = ')';
        else
            if (in1[i] == ')')
                in1[i] = '(';
    }
    cout << "\n\n step 3: ";
    for (i = 0; i <= strlen(in1) - 1; i++)
    {
        cout << in1[i];
    }
    cout << "\n\n step 4: ";
    cout << "\n Prefix is: ";
    infix_to_postfix(in1, prefix);
    for (i = 0, j = strlen(prefix) - 1; i < j; i++, j--)
    {
        temp = prefix[i];
        prefix[i] = prefix[j];
        prefix[j] = temp;
    }
}

void infix_to_postfix(char infix[], char postfix[]){
    stack s;
    node* top;
    char x;
    int i, j;
    char token;
    j = 0;
    for (i = 0; infix[i] != '\0'; i++)
    {
        token = infix[i];
        if (isalnum(token))
        {
            postfix[j++] = token;
        }
        else if (token == '(')
        {
            s.push('(');
        }
        else if (token == ')')
        {
            while ((x = s.pop()) != '(')
            {
                postfix[j++] = x;
            }
        }
        else
        {
            x = s.pop1();
            while (precedence(token) < precedence(x) && !s.empty())
            {
                x = s.pop();
                postfix[j++] = x;
            }
            s.push(token);
        }
    }
    while (!s.empty())
    {
        x = s.pop();
        postfix[j++] = x;
    }
    postfix[j] = '\0';
}
 
int precedence(char x){
    if (x == '(')
    {
        return(0);
    }
    if (x == '+' || x == '-')
    {
        return(1);
    }
    if (x == '*' || x == '/' || x == '%')
    {
        return(2);
    }
    return(3);
}
 
void eval_prefix(char prefix[]){
    stack s;
    char x;
    int op1, op2, val, i;
    for (i = strlen(prefix) - 1; i >= 0; i--)
    {
        x = prefix[i];
        if (isalpha(x))
        {
            cout << "\nEnter the value of " << x << ":";
            cin >> val;
            s.push(val);
        }
        else
        {
            op1 = s.pop();
            op2 = s.pop();
            val = evaluate(x, op1, op2);
            s.push(val);
        }
    }
    val = s.pop();
    cout << "\nValue of expression is: " << val;
}
 
void eval_postfix(char postfix[]){
    stack s;
    char x;
    int op1, op2, val, i;
    for (i = 0; postfix[i] != '\0'; i++)
    {
        x = postfix[i];
        if (isalpha(x))
        {
            cout << "\nEnter the value of " << x << ":";
            cin >> val;
            s.push(val);
        }
        else
        {
            op2 = s.pop();
            op1 = s.pop();
            val = evaluate(x, op1, op2);
            s.push(val);
        }
    }
    val = s.pop();
    cout << "\nValue of expression is: " << val;
    cout<<endl;
}
 
int evaluate(char x, int op1, int op2){
    if (x == '+')
        return(op1 + op2);
    if (x == '-')
        return(op1 - op2);
    if (x == '*')
        return(op1 * op2);
    if (x == '/')
        return(op1 / op2);
    if (x == '%')
        return(op1 % op2);
    return 0;
}





Title: Expression Conversion And Evaluation Using Stack ADT

Aim: To study implementation of stack as an abstract data type using singly linked list

Objective: To study implementation of stack as an abstract data type using singly linked list

Problem Statement: Implement stack as an abstract data type using singly linked list and use this ADT for Conversion of
• Infix Expression to Postfix,
• Infix Expression to Prefix Evaluation of
• Postfix Expression
• Prefix Expression.

Requirements:Software, text editor, GDB Compiler, terminal, etc.

Theory:
Linked List:-
“Linked List” is a linear data structure. Unlike arrays, linked list elements are not stored at a
contiguous location; the elements are linked using pointers.

Singly Linked List:-
Singly linked list can be defined as the collection of ordered set of elements. The number of
elements may vary according to need of the program. A node in the singly linked list consist
of two parts: Data part and Link part.Data part of the node stores actual information that is
to be represented by the node while the link part of the node stores the address of its
immediate successor.

Stack :-
A Stack is a linear data structure that follows the LIFO (Last-In-First-Out) principle. Stack has
one end, whereas the Queue has two ends (front and rear). It contains only one pointer top
pointer pointing to the topmost element of the stack. Whenever an element is added in the
stack, it is added on the top of the stack, and the element can be deleted only from the
stack. In other words, a stack can be defined as a container in which insertion and deletion
can be done from the one end known as the top of the stack.

Push Operation :-
Push operation refers to inserting an element in the stack. Since there’s only one
position at which the new element can be inserted — Top of the stack, the new element is
inserted at the top of the stack.

Pop Operation :-Pop operation refers to the removal of an element. Again, since we only
have access to the element at the top of the stack, there’s only one element that we can
remove. We just remove the top of the stack.

Infix Expression :- An infix expression is a single letter, or an operator, proceeded by one
infix string and followed by another infix string.
Eg: A+B

Prefix Expression :-A prefix expression is a single letter, or an operator, followed by two
prefix strings. Every prefix string longer than a single variable contains an operator, first
operand and second operand.
Eg:+AB

Postfix Expression :-A postfix expression (also called Reverse Polish Notation) is a single
letter or an operator, preceded by two postfix strings. Every postfix string longer than a
single variable contains first and second operands followed by an operator.
Eg:- AB+

Algorithm of whole program:
